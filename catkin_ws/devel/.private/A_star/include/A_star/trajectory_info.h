// Generated by gencpp from file A_star/trajectory_info.msg
// DO NOT EDIT!


#ifndef A_STAR_MESSAGE_TRAJECTORY_INFO_H
#define A_STAR_MESSAGE_TRAJECTORY_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace A_star
{
template <class ContainerAllocator>
struct trajectory_info_
{
  typedef trajectory_info_<ContainerAllocator> Type;

  trajectory_info_()
    : inputs()
    , max_F_xr(0.0)
    , max_F_xf(0.0)
    , max_F_yr(0.0)
    , max_F_yf(0.0)
    , t_execution(0.0)
    , dx(0.0)
    , dy(0.0)
    , du(0.0)  {
    }
  trajectory_info_(const ContainerAllocator& _alloc)
    : inputs(_alloc)
    , max_F_xr(0.0)
    , max_F_xf(0.0)
    , max_F_yr(0.0)
    , max_F_yf(0.0)
    , t_execution(0.0)
    , dx(0.0)
    , dy(0.0)
    , du(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _inputs_type;
  _inputs_type inputs;

   typedef double _max_F_xr_type;
  _max_F_xr_type max_F_xr;

   typedef double _max_F_xf_type;
  _max_F_xf_type max_F_xf;

   typedef double _max_F_yr_type;
  _max_F_yr_type max_F_yr;

   typedef double _max_F_yf_type;
  _max_F_yf_type max_F_yf;

   typedef double _t_execution_type;
  _t_execution_type t_execution;

   typedef double _dx_type;
  _dx_type dx;

   typedef double _dy_type;
  _dy_type dy;

   typedef double _du_type;
  _du_type du;





  typedef boost::shared_ptr< ::A_star::trajectory_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::A_star::trajectory_info_<ContainerAllocator> const> ConstPtr;

}; // struct trajectory_info_

typedef ::A_star::trajectory_info_<std::allocator<void> > trajectory_info;

typedef boost::shared_ptr< ::A_star::trajectory_info > trajectory_infoPtr;
typedef boost::shared_ptr< ::A_star::trajectory_info const> trajectory_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::A_star::trajectory_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::A_star::trajectory_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::A_star::trajectory_info_<ContainerAllocator1> & lhs, const ::A_star::trajectory_info_<ContainerAllocator2> & rhs)
{
  return lhs.inputs == rhs.inputs &&
    lhs.max_F_xr == rhs.max_F_xr &&
    lhs.max_F_xf == rhs.max_F_xf &&
    lhs.max_F_yr == rhs.max_F_yr &&
    lhs.max_F_yf == rhs.max_F_yf &&
    lhs.t_execution == rhs.t_execution &&
    lhs.dx == rhs.dx &&
    lhs.dy == rhs.dy &&
    lhs.du == rhs.du;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::A_star::trajectory_info_<ContainerAllocator1> & lhs, const ::A_star::trajectory_info_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace A_star

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::A_star::trajectory_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::A_star::trajectory_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::A_star::trajectory_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::A_star::trajectory_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::A_star::trajectory_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::A_star::trajectory_info_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::A_star::trajectory_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a80521809d1ba9b34b717fcd10c259f";
  }

  static const char* value(const ::A_star::trajectory_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a80521809d1ba9bULL;
  static const uint64_t static_value2 = 0x34b717fcd10c259fULL;
};

template<class ContainerAllocator>
struct DataType< ::A_star::trajectory_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "A_star/trajectory_info";
  }

  static const char* value(const ::A_star::trajectory_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::A_star::trajectory_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] inputs\n"
"float64 max_F_xr\n"
"float64 max_F_xf\n"
"float64 max_F_yr\n"
"float64 max_F_yf\n"
"float64 t_execution\n"
"float64 dx\n"
"float64 dy\n"
"float64 du\n"
;
  }

  static const char* value(const ::A_star::trajectory_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::A_star::trajectory_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.inputs);
      stream.next(m.max_F_xr);
      stream.next(m.max_F_xf);
      stream.next(m.max_F_yr);
      stream.next(m.max_F_yf);
      stream.next(m.t_execution);
      stream.next(m.dx);
      stream.next(m.dy);
      stream.next(m.du);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct trajectory_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::A_star::trajectory_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::A_star::trajectory_info_<ContainerAllocator>& v)
  {
    s << indent << "inputs[]" << std::endl;
    for (size_t i = 0; i < v.inputs.size(); ++i)
    {
      s << indent << "  inputs[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.inputs[i]);
    }
    s << indent << "max_F_xr: ";
    Printer<double>::stream(s, indent + "  ", v.max_F_xr);
    s << indent << "max_F_xf: ";
    Printer<double>::stream(s, indent + "  ", v.max_F_xf);
    s << indent << "max_F_yr: ";
    Printer<double>::stream(s, indent + "  ", v.max_F_yr);
    s << indent << "max_F_yf: ";
    Printer<double>::stream(s, indent + "  ", v.max_F_yf);
    s << indent << "t_execution: ";
    Printer<double>::stream(s, indent + "  ", v.t_execution);
    s << indent << "dx: ";
    Printer<double>::stream(s, indent + "  ", v.dx);
    s << indent << "dy: ";
    Printer<double>::stream(s, indent + "  ", v.dy);
    s << indent << "du: ";
    Printer<double>::stream(s, indent + "  ", v.du);
  }
};

} // namespace message_operations
} // namespace ros

#endif // A_STAR_MESSAGE_TRAJECTORY_INFO_H
