// Generated by gencpp from file A_star/state_lattice.msg
// DO NOT EDIT!


#ifndef A_STAR_MESSAGE_STATE_LATTICE_H
#define A_STAR_MESSAGE_STATE_LATTICE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <A_star/trajectory_info.h>

namespace A_star
{
template <class ContainerAllocator>
struct state_lattice_
{
  typedef state_lattice_<ContainerAllocator> Type;

  state_lattice_()
    : state_lattice()  {
    }
  state_lattice_(const ContainerAllocator& _alloc)
    : state_lattice(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::A_star::trajectory_info_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::A_star::trajectory_info_<ContainerAllocator> >::other >  _state_lattice_type;
  _state_lattice_type state_lattice;





  typedef boost::shared_ptr< ::A_star::state_lattice_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::A_star::state_lattice_<ContainerAllocator> const> ConstPtr;

}; // struct state_lattice_

typedef ::A_star::state_lattice_<std::allocator<void> > state_lattice;

typedef boost::shared_ptr< ::A_star::state_lattice > state_latticePtr;
typedef boost::shared_ptr< ::A_star::state_lattice const> state_latticeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::A_star::state_lattice_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::A_star::state_lattice_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::A_star::state_lattice_<ContainerAllocator1> & lhs, const ::A_star::state_lattice_<ContainerAllocator2> & rhs)
{
  return lhs.state_lattice == rhs.state_lattice;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::A_star::state_lattice_<ContainerAllocator1> & lhs, const ::A_star::state_lattice_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace A_star

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::A_star::state_lattice_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::A_star::state_lattice_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::A_star::state_lattice_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::A_star::state_lattice_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::A_star::state_lattice_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::A_star::state_lattice_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::A_star::state_lattice_<ContainerAllocator> >
{
  static const char* value()
  {
    return "21d5c82c027bad3bde19fcd10f49336b";
  }

  static const char* value(const ::A_star::state_lattice_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x21d5c82c027bad3bULL;
  static const uint64_t static_value2 = 0xde19fcd10f49336bULL;
};

template<class ContainerAllocator>
struct DataType< ::A_star::state_lattice_<ContainerAllocator> >
{
  static const char* value()
  {
    return "A_star/state_lattice";
  }

  static const char* value(const ::A_star::state_lattice_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::A_star::state_lattice_<ContainerAllocator> >
{
  static const char* value()
  {
    return "A_star/trajectory_info[] state_lattice\n"
"================================================================================\n"
"MSG: A_star/trajectory_info\n"
"float64[] inputs\n"
"float64 max_F_xr\n"
"float64 max_F_xf\n"
"float64 max_F_yr\n"
"float64 max_F_yf\n"
"float64 t_execution\n"
"float64 dx\n"
"float64 dy\n"
"float64 du\n"
;
  }

  static const char* value(const ::A_star::state_lattice_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::A_star::state_lattice_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state_lattice);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct state_lattice_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::A_star::state_lattice_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::A_star::state_lattice_<ContainerAllocator>& v)
  {
    s << indent << "state_lattice[]" << std::endl;
    for (size_t i = 0; i < v.state_lattice.size(); ++i)
    {
      s << indent << "  state_lattice[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::A_star::trajectory_info_<ContainerAllocator> >::stream(s, indent + "    ", v.state_lattice[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // A_STAR_MESSAGE_STATE_LATTICE_H
