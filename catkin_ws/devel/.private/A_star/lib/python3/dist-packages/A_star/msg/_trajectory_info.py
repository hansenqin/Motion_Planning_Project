# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from A_star/trajectory_info.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class trajectory_info(genpy.Message):
  _md5sum = "3a80521809d1ba9b34b717fcd10c259f"
  _type = "A_star/trajectory_info"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float64[] inputs
float64 max_F_xr
float64 max_F_xf
float64 max_F_yr
float64 max_F_yf
float64 t_execution
float64 dx
float64 dy
float64 du"""
  __slots__ = ['inputs','max_F_xr','max_F_xf','max_F_yr','max_F_yf','t_execution','dx','dy','du']
  _slot_types = ['float64[]','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       inputs,max_F_xr,max_F_xf,max_F_yr,max_F_yf,t_execution,dx,dy,du

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(trajectory_info, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.inputs is None:
        self.inputs = []
      if self.max_F_xr is None:
        self.max_F_xr = 0.
      if self.max_F_xf is None:
        self.max_F_xf = 0.
      if self.max_F_yr is None:
        self.max_F_yr = 0.
      if self.max_F_yf is None:
        self.max_F_yf = 0.
      if self.t_execution is None:
        self.t_execution = 0.
      if self.dx is None:
        self.dx = 0.
      if self.dy is None:
        self.dy = 0.
      if self.du is None:
        self.du = 0.
    else:
      self.inputs = []
      self.max_F_xr = 0.
      self.max_F_xf = 0.
      self.max_F_yr = 0.
      self.max_F_yf = 0.
      self.t_execution = 0.
      self.dx = 0.
      self.dy = 0.
      self.du = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.inputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.inputs))
      _x = self
      buff.write(_get_struct_8d().pack(_x.max_F_xr, _x.max_F_xf, _x.max_F_yr, _x.max_F_yf, _x.t_execution, _x.dx, _x.dy, _x.du))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputs = s.unpack(str[start:end])
      _x = self
      start = end
      end += 64
      (_x.max_F_xr, _x.max_F_xf, _x.max_F_yr, _x.max_F_yf, _x.t_execution, _x.dx, _x.dy, _x.du,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.inputs)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.inputs.tostring())
      _x = self
      buff.write(_get_struct_8d().pack(_x.max_F_xr, _x.max_F_xf, _x.max_F_yr, _x.max_F_yf, _x.t_execution, _x.dx, _x.dy, _x.du))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.inputs = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 64
      (_x.max_F_xr, _x.max_F_xf, _x.max_F_yr, _x.max_F_yf, _x.t_execution, _x.dx, _x.dy, _x.du,) = _get_struct_8d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8d = None
def _get_struct_8d():
    global _struct_8d
    if _struct_8d is None:
        _struct_8d = struct.Struct("<8d")
    return _struct_8d
